using System;using System.ComponentModel;using System.Runtime.CompilerServices;using ViewModel.Annotations;namespace ViewModel{    public abstract class ViewModelBase : INotifyPropertyChanged    {        protected readonly IViewModelManager _viewModelManager;        protected ViewModelBase(IViewModelManager viewModelManager)        {            _viewModelManager = viewModelManager;            viewModelManager.ShowViewModel(this);        }        public bool IsClosed { get; private set; }        public void Close()        {            if (!IsClosed && OnClosing())            {                PrepareClose();                IsClosed = true;                _viewModelManager.CloseViewModel(this);            }        }        protected void PrepareClose()        {        }        protected bool OnClosing()        {            return true;        }        public event PropertyChangedEventHandler PropertyChanged;        [NotifyPropertyChangedInvocator]        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)        {            var propertyChangedEventArgs = new PropertyChangedEventArgs(propertyName);            PropertyChanged?.Invoke(this, propertyChangedEventArgs);        }    }}